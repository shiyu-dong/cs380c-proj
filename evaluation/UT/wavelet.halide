#include "Halide.h"

#define RESULT_TYPE float
using namespace Halide;

const float D0 = 0.4829629131445341f;
const float D1 = 0.83651630373780772f;
const float D2 = 0.22414386804201339f;
const float D3 = -0.12940952255126034f;

int main(int argc, char **argv) {
  Var x, y, c;
  Func clamped(x, y);
  Func wavelet_clamped(x, y, c);
  Func inv_haar_x(x, y);
  Func for_haar_x(x[1], y);
  Func inv_daub_x(x, y);
  Func for_daub_x(x[2], y);

  Image<float> image(32, 16);
  Image<float> wavelet(32, 16, 3);

  clamped(x, y) = image(clamp(x, 0, 31), clamp(y, 0, 15));
  wavelet_clamped(x, y, c) = wavelet(clamp(x, 0, 31), clamp(y, 0, 15), c);

  inv_haar_x(x, y) = select(x%2 == 0, wavelet_clamped(x/2, y, 0) + wavelet_clamped(x/2, y, 1), wavelet_clamped (x/2, y, 0) - wavelet_clamped(x/2, y, 1));

  for_haar_x(x, y) = (clamped(x, y) + clamped(x+1, y), clamped(x, y) - clamped(x+1, y))/2;

  inv_daub_x(x, y) = select(x%2 == 0, D2*wavelet_clamped(x/2, y, 0) + D1*wavelet_clamped(x/2, y, 1) + D0*wavelet_clamped(x/2+1, y, 0) + D3*wavelet_clamped(x/2+1, y, 1), D3*wavelet_clamped(x/2, y, 0) - D0*wavelet_clamped(x/2, y, 1) + D1*wavelet_clamped(x/2+1, y, 0) - D2*wavelet_clamped(x/2+1, y, 1));

  for_daub_x(x, y) = (D0*clamped(x-1, y) + D1*clamped(x, y) + D2*clamped(x+1, y) + D3*clamped(x+2, y), D3*clamped(x-1, y) - D2*clamped(x, y) + D1*clamped(x+1, y) - D0*clamped(x+2, y));

  Image<float> out = clamped.realize(32, 16);
  Image<float> out1 = wavelet_clamped.realize(32, 16, 3);


  return 0;
}
