Expand C to support following class and operations:

C Library:
template<typename>
class Image {
	Image(unsigned int w, unsigned int h)
	operator (int, int) and (Var, Var) to access value in coordinate
  operator = (Image x = Image y)
}

UniformImage {
  UniformImage(const Type &t, int dims);
	operator (int, int) and (Var, Var) to access value in coordinate
  operator =  (Image x = UniformImage y)
}

Var {
  always unsigned int
  upper and lower bound
  incremental step
}

Compiler:
Func {
  Func can be defined in a functional language style
  Func can be assigned a pointer to a C function
  Func is called using realize, whose args suggests sizes on x n y dimension

  Input of Func is always specified in algorithm description, if there is any
  Output of Func is always an Image, which type is the same as input (inferred by compiler)

  Replace algorithm description of Func to cooresponding for loops:
    Func f; // remember that f is Func
    ...
    f(x,y) = max(x, y); // translate directly into two level nested for loops

  Try to put whatever describes the function into a loop

  need to remember all Func, Var, C function, C variable to figure out meaning of a symbol and type of it
}

Expr {
  simply remember and replace
}

Halide Functions: 
  Var max(Var, Var);
  Var min(Var, Var);
  Var clamp(Var, T, T);
  Var select(bool, Expr,Expr);

Expr vs Var
  Var is always unsigned int and describes iterations through an image
  Expr = UniformImage(Var)
  Expr is more general, can contain any type.

UniformImage vs Image
  UniformImage is to be specified in runtime
  It does not contain actual image data
  It can be assigned to be any Image (UniformImage x = Image y);

TODO:
  Need a way to specify loops that can't be merged

Syntax change:
  Func declaration needs to specify what Vars are used
  User statically specify result type
  Use static_cast<int> or (int) instead of cast<int>
  No name of any variable Func f("f") -> Func f(x, y); Var x("x") -> Var x
  Change all Uniform data structure into regular ones
  f(x,y)++ must be changed into f(x,y) = f(x,y)+1
  loop boundary inference: Func f(x[1], y[k+2]). Use [..] to specify variable offsets
    reduction function does not have offsets. Boundary in those functions enforced by RDom
  each function can be realized only once
  Tile Variables must be original variable name + "Tile"

TO TEST:
  51 bounds: has two realize
  51 input_image_bounds_check: has set_error_handler
  52 histogram: has f.update
  56 reduction: has f.sum, f.product, f.minimum, f.maximum, etc.
  58 parallel_performance: has two realize
  65 convolution: has f.tile, f.update
  66 histogram_equalize: has in, don't know where it comes from
  69 rehydrate: has f.uniforms, f.uniformImages
->106 vector_cast: can compile, result is wrong
  113 vectorize: has two realize
  138 game of life: has select, don't know where it comes from, and many complicated Expr
->350 vector_math: has two realize in f10, but it's a good test, maybe can be modified
  1393 simd_op_check: too long...

Comments:
  The first number is # of lines
  Maybe we need to have support for more than one realize for one function...
  I added the cases marked with -> to svn, probably 69 can also be modified, not sure
