#include "Halide.h"

#define RESULT_TYPE T
using namespace Halide;

template<typename T>
bool test() {
    Var x;
    Func f(x);
    f(x) = static_cast<T>(x) % 2;
    f.root();
    f.tile(x, xTile, 16);
    f.parallel(xTile);
    //f.vectorize();

    Image<T> im = f.realize(8192);

    for (int i = 0; i < 16; i++) {
        //printf("%f ", (double)(im(i)));
        if (im(i) != (T)(i%2)) return false;
    }
    //printf("\n");

    return true;
}

int main(int argc, char **argv) {

    if (
        test<int32_t>() &&
        test<uint32_t>() &&
        test<int16_t>() &&
        test<uint16_t>() &&
        test<int8_t>() &&
        test<uint8_t>()) {
        printf("Success!\n");
        return 0;
    }

    printf("Failure!\n");
    return -1;
}
