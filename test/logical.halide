#include "Halide.h"

#define RESULT_TYPE uint8_t
using namespace Halide;

int main(int argc, char **argv) {

    Image<uint8_t> input(8192, 8192);

    for (int y = 0; y < 8192; y++) {
        for (int x = 0; x < 8192; x++) {
            input(x, y) = y*8192 + x;
        }
    }

    Func f(x, y);
    Var x, y;
    f(x, y) = select(((input(x, y) > 10) && (input(x, y) < 20)) || ((input(x, y) > 40) && (!(input(x, y) > 50))), 255, 0);
    f.root();
    f.tile(x, xTile, 8, y, yTile, 8);
    f.parallel(yTile);
    //f.vectorize();

    Image<uint8_t> output = f.realize(8192, 8192);

    for (int y = 0; y < 8192; y++) {
        for (int x = 0; x < 8192; x++) {
            bool cond = ((input(x, y) > 10) && (input(x, y) < 20)) ||
                ((input(x, y) > 40) && (!(input(x, y) > 50)));
            uint8_t correct = cond ? 255 : 0;
            if (correct != output(x, y)) {
                printf("output(%d, %d) = %d instead of %d\n", x, y, output(x, y), correct);
                return -1;
            }
        }
    }

    printf("Success!\n");
    return 0;

}
